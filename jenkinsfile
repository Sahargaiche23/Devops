pipeline {
    agent any
    tools {
        jdk 'JDK17'
        maven 'Maven'
    }
    environment {
        SONAR_SCANNER = tool 'SonarQubeScanner'
        DOCKER_REGISTRY = '192.168.56.10:5000'

    }

    stages {
        // Stage 1: Checkout
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // Stage 2: Build
        stage('Build') {
            steps {
                sh 'mvn clean compile'
            }
        }

        // Stage 3: Test
        stage('Test') {
            steps {
                sh 'mvn test'
                junit 'target/surefire-reports/*.xml'
            }
        }
        stage('Deploy to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-creds', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    sh """
                        mvn deploy -DskipTests \
                            -Dnexus.username=$NEXUS_USER \
                            -Dnexus.password=$NEXUS_PASS
                    """
                }
            }
        }

        // Stage 4: Package
        stage('Package') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }

        // Stage 5: SonarQube Analysis
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                        ${SONAR_SCANNER}/bin/sonar-scanner \
                        -Dsonar.projectKey=devopsSecure \
                        -Dsonar.sources=. \
                        -Dsonar.java.binaries=target/classes \
                        -Dsonar.host.url=http://localhost:9000
                    """
                }
            }
        }

        stage('Build Docker Image') {
                    steps {
                        script {
                            docker.build("${DOCKER_REGISTRY}/kaddem:0.0.1")
                        }
                    }
                }

               // Previous stages remain the same...

                       stage('Verify Registry') {
                           steps {
                               script {
                                   // CORRECT: Using a string for the shell command
                                   def result = sh(script: "curl -I http://${DOCKER_REGISTRY}/v2/ || true", returnStatus: true)
                                   if (result != 0) {
                                       error "Docker registry at ${DOCKER_REGISTRY} is not accessible"
                                   }
                               }
                           }
                       }

                       stage('Push to Docker Registry') {
                           steps {
                               script {
                                   withCredentials([usernamePassword(
                                       credentialsId: 'nexus-creds',
                                       usernameVariable: 'DOCKER_USER',
                                       passwordVariable: 'DOCKER_PASS'
                                   )]) {
                                       sh '''
                                           echo "$DOCKER_PASS" | docker login http://192.168.56.10:5000 \
                                               -u "$DOCKER_USER" \
                                               --password-stdin
                                           docker push 192.168.56.10:5000/kaddem:0.0.1
                                       '''
                                   }
                               }
                           }
                       }

    }

    post {
        always {
            cleanWs()
        }
    }
}