pipeline {
    agent any
    tools {
        jdk 'JDK17'
        maven 'Maven'
    }
    environment {
        SONAR_SCANNER = tool 'SonarQubeScanner'
        DOCKER_REGISTRY = '192.168.56.10:5000'
        APP_VERSION = '0.0.1'
        MAVEN_OPTS = '-Xmx512m -XX:MaxMetaspaceSize=256m'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'mvn -B clean compile -Dmaven.repo.local=${WORKSPACE}/.m2/repository'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn -B test -Dmaven.repo.local=${WORKSPACE}/.m2/repository'
                junit 'target/surefire-reports/*.xml'
            }
        }

        stage('SonarQube Analysis') {
            when {
                expression {
                    return env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master'
                }
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                        ${SONAR_SCANNER}/bin/sonar-scanner \
                        -Dsonar.projectKey=devopsSecure \
                        -Dsonar.sources=. \
                        -Dsonar.java.binaries=target/classes \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.inclusions=**/*.java
                    """
                }
            }
        }

        stage('Package') {
            steps {
                sh 'mvn -B package -DskipTests -Dmaven.repo.local=${WORKSPACE}/.m2/repository'
            }
        }

        stage('Deploy to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-creds', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    sh '''
                        mvn deploy -B -DskipTests -Dmaven.repo.local=${WORKSPACE}/.m2/repository \
                        -Dnexus.username=$NEXUS_USER -Dnexus.password=$NEXUS_PASS
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_REGISTRY}/kaddem:${APP_VERSION}", "--no-cache --pull .")
                }
            }
        }

        stage('Push to Docker Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'nexus-creds',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh """
                            echo "$DOCKER_PASS" | docker login ${DOCKER_REGISTRY} \
                                -u "$DOCKER_USER" \
                                --password-stdin
                            docker push ${DOCKER_REGISTRY}/kaddem:${APP_VERSION}
                        """
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    // Stop and remove old containers
                    sh 'docker-compose down || true'

                    // Prune unused images to free space
                    sh 'docker image prune -f'

                    // Start application stack
                    sh 'docker-compose up -d kaddem-app mysql'
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
            // Remove Docker images older than 24h
            sh 'docker image prune -a --filter "until=24h" -f || true'
        }
    }
}