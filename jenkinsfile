pipeline {
    agent any
    tools {
        jdk 'JDK17'
        maven 'Maven'
    }
    environment {
        SONAR_SCANNER = tool 'SonarQubeScanner'
        DOCKER_REGISTRY = '192.168.56.10:5000'
        APP_VERSION = '0.0.1'  // Consider making this dynamic
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
                junit 'target/surefire-reports/*.xml'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                        ${SONAR_SCANNER}/bin/sonar-scanner \
                        -Dsonar.projectKey=devopsSecure \
                        -Dsonar.sources=. \
                        -Dsonar.java.binaries=target/classes \
                        -Dsonar.host.url=http://localhost:9000
                    """
                }
            }
        }
        
        stage('Package') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }

        stage('Deploy to Nexus') {
                    steps {
                        withCredentials([usernamePassword(credentialsId: 'nexus-creds', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                            sh '''
                                mvn deploy -DskipTests -Dnexus.username=$NEXUS_USER -Dnexus.password=$NEXUS_PASS
                            '''
                        }
                    }
                }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_REGISTRY}/kaddem:${APP_VERSION}")
                }
            }
        }

        stage('Verify Registry') {
            steps {
                script {
                    def result = sh(script: "curl -I http://${DOCKER_REGISTRY}/v2/ || true", returnStatus: true)
                    if (result != 0) {
                        error "Docker registry at ${DOCKER_REGISTRY} is not accessible"
                    }
                }
            }
        }

        stage('Push to Docker Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'nexus-creds',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh """
                            echo "$DOCKER_PASS" | docker login ${DOCKER_REGISTRY} \
                                -u "$DOCKER_USER" \
                                --password-stdin
                            docker push ${DOCKER_REGISTRY}/kaddem:${APP_VERSION}
                        """
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    // Stop and remove old containers
                    sh 'docker-compose down || true'
                    
                    // Pull latest images
                    sh 'docker-compose pull'
                    
                    // Start application stack
                    sh 'docker-compose up -d'
                }
            }
        }

        stage('Deploy Monitoring') {
            steps {
                script {
                    parallel {
                        stage('Prometheus') {
                            steps {
                                timeout(time: 1, unit: 'MINUTES') {
                                    sh 'docker-compose up -d prometheus'
                                    sleep 7
                                    echo "Prometheus running at http://192.168.56.10:9090"
                                }
                            }
                        }
                        stage('Grafana') {
                            steps {
                                timeout(time: 1, unit: 'MINUTES') {
                                    sh 'docker-compose up -d grafana'
                                    sleep 2
                                    echo "Grafana running at http://192.168.56.10:3000"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()

        }
    }
}